
<!-- Start header -->
<header id="header" class="site-header header-style-1">
    <nav class="navigation navbar navbar-default">
        <div class="container-fluid">
            <div class="navbar-header">
                <button type="button" class="open-btn">
                    <span class="sr-only">Toggle navigation</span>
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                </button>
                <a class="navbar-brand" href="/"><img src="assets/images/logo.png" alt></a>
            </div>
            <div id="navbar" class="navbar-collapse collapse navigation-holder">
                <button class="close-navbar"><i class="ti-close"></i></button>
                
                @GeneratedMenu
                
            </div><!-- end of nav-collapse -->

            <div class="search-contact">
                <div class="header-search-area">
                    <div class="header-search-form">
                        <form class="form">
                            <div>
                                <input type="text" class="form-control" placeholder="Search here">
                            </div>
                            <button type="submit" class="btn"><i class="ti-search"></i></button>
                        </form>
                    </div>
                    <div>
                        <button class="btn open-btn"><i class="ti-search"></i></button>
                    </div>
                </div>
                <div class="contact">
                    <div class="call">
                        <i class="fi flaticon-call"></i>
                        <p>Call us anytime</p>
                        <h5><a class="header-call" href="call:+981735844196">+98-17-35844196</a></h5>
                    </div>
                    <a href="/contact" class="theme-btn">Contact us</a>
                    @* <LoginDisplay /> *@
                </div>
            </div>
        </div><!-- end of container -->
    </nav>
</header>
<!-- end of header -->

@code {
    private List<MenuItem> MenuItems { get; set; } = FakeData.GetFakeMenu();
    public MarkupString GeneratedMenu { get; set; }
    protected override Task OnInitializedAsync()
    {
        GenerateMenu();
        return base.OnInitializedAsync();
    }

    private void GenerateMenu()
    {
        var result = new System.Text.StringBuilder();
        result.AppendLine("<ul class='nav navbar-nav'>");
        var treeMenu = GetTreeMenu();
        foreach(var item in treeMenu)
        {
            var itemId = item.MenuItem.Id;
            var title = item.MenuItem.Title;
            var url = item.MenuItem.Url;
            if(!item.Children.Any())
            {
                result.AppendLine("<li>");
                result.AppendLine($"<a href='{url}'>{title}</a>");
                result.AppendLine("</li>");
            }
            else
            {
                result.AppendLine("<li class='menu-item-has-children'>");
                result.AppendLine($"<a href='{url}'>{title}</a>");
                result.AppendLine("<ul class='sub-menu'>");
                result.Append(GenerateSubMenus(item));
                result.AppendLine("</ul>");
                result.AppendLine("</li>");
            }
        }
        result.AppendLine("</ul>");

        GeneratedMenu = (MarkupString)result.ToString();
    }
    private System.Text.StringBuilder GenerateSubMenus(MenuItemsListViewModel parentItem)
    {
        var result = new System.Text.StringBuilder();
        var children = parentItem.Children;
        foreach(var child in children)
        {
            var itemId = child.MenuItem.Id;
            var title = child.MenuItem.Title;
            var url = child.MenuItem.Url;
            if(!child.Children.Any())
            {
                result.AppendLine("<li>");
                result.AppendLine($"<a href='{url}'>{title}</a>");
                result.AppendLine("</li>");
            }
            else
            {
                result.AppendLine("<li class='menu-item-has-children'>");
                result.AppendLine($"<a href='{url}'>{title}</a>");
                result.AppendLine("<ul class='sub-menu'>");
                result.Append(GenerateSubMenus(child));
                result.AppendLine("</ul>");
                result.AppendLine("</li>");
            }
        }
        return result;
    }

    private List<MenuItem> GetItemsByParentId(Guid parentId)
    {
        return MenuItems.Where(x => x.ParentId == parentId).OrderBy(x => x.AppearanceOrder).ToList();
    }

    private List<MenuItemsListViewModel> GetTreeMenu()
    {
        var firstLevelItems = MenuItems.Where(x => x.ParentId == null).OrderBy(c => c.AppearanceOrder).ToList();
        var treeMenu = new List<MenuItemsListViewModel>();
        foreach(var item in firstLevelItems)
        {
            var lvl0 = new MenuItemsListViewModel();
            lvl0.MenuItem = item;
            lvl0.Children = GetChildrenTree(item);
            treeMenu.Add(lvl0);
        }
        return treeMenu;
    }

    private List<MenuItemsListViewModel> GetChildrenTree(MenuItem parent)
    {
        var result = new List<MenuItemsListViewModel>();
        var topLevelItems = GetItemsByParentId(parent.Id);
        foreach (var topLevelItem in topLevelItems)
        {
            var children = GetItemsByParentId(topLevelItem.Id);
            var lvl = new MenuItemsListViewModel();
            lvl.MenuItem = topLevelItem;
            lvl.Children = GetChildrenTree(topLevelItem);
            result.Add(lvl);
        }
        return result;
    }

}